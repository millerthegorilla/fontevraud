ImportJS.pack('vine.branch',function(module)
{var climberbase=this.import('vine.climberbase');var point=this.import('utils.point');var utils=this.import('utils.utils');var drawfunctions=this.import('vine.drawfunctions');branch.prototype=Object.create(climberbase.prototype);branch.prototype.constructor=branch;function branch(params,seed)
{climberbase.call(this,params);this._bark=0;this._seed=params.seed;this._numCurvesPerSide=utils.randomi(1,3);this._curveDepth=utils.randomi(params.branchLength*0.1,params.branchLength*0.4);this._garden=params.garden;this._startingPoint=params.currentPoint.clone();this._currentPoint=params.currentPoint.clone();this._toPoint=params.currentPoint.clone();this._girth=utils.randomi(1,params.girth-1);this._funcs=[drawfunctions.curveXRFunc,drawfunctions.curveXLFunc,drawfunctions.curveYUFunc,drawfunctions.curveYDFunc,drawfunctions.curveXFunc,drawfunctions.curveYFunc,drawfunctions.curveYD];this._drawFunction=this._funcs[utils.randomi(0,this._funcs.length-1)];this._curveRadiusX=utils.randomi(10,20);this._curveRadiusY=utils.randomi(10,20);this._timePerSide=utils.randomi(params.branchTimeMin,params.branchTimeMax);this._sideLength=utils.randomi(params.branchLength*0.4,params.branchLength);this._distancePerCurve=this._sideLength/this._numCurvesPerSide;this._flex=params.branchflex;}
branch.prototype._finish=function()
{this._seed.growFlower({x:this._currentPoint.x,y:this._currentPoint.y});this._garden.animation.remove(this);delete this._drawFunction;this._drawFunction=null;};branch.prototype._grow=function()
{climberbase.prototype._grow.call(this);}
module.exports=branch;});ImportJS.pack('vine.climber',function(module)
{var climberbase=this.import('vine.climberbase');var flower=this.import('vine.flower');var garden=this.import('vine.garden');var point=this.import('utils.point');var utils=this.import('utils.utils');var circularQueue=this.import('utils.circularQueue');var drawfunctions=this.import('vine.drawfunctions');climber.prototype=Object.create(climberbase.prototype);climber.prototype.constructor=climber;function climber(params)
{climberbase.call(this,params);this._branchTimeMax=params.branchTimeMax;this._branchTimeMin=params.branchTimeMin;this._stem=true;this._startCorner=params.startCorner;this._numOfSides=params.numOfSides;this._bark=params.bark;this._left=params.left;this._top=params.top;this._height=params.height;this._width=params.width;this._corner={'TL':0,'TR':1,'BR':2,'BL':3};this._currentSide=0;this._corners=new circularQueue();this._corners.push(new point(this._left,this._top));this._corners.push(new point(this._left+this._width,this._top));this._corners.push(new point(this._left+this._width,this._top+this._height));this._corners.push(new point(this._left,this._top+this._height));this._corners.index=this._corner[this._startCorner];this._corners.reverse=(this._direction==='CW')?false:true;this._currentPoint=this._corners[this._corners.index].clone();this._startingPoint=this._currentPoint.clone();this._toPoint=this._currentPoint.clone();this._timePerSide=Math.floor(this._time/this._numOfSides);this._sideLength=this._corners[this._corners.nextIndex].distanceFrom(this._corners[this._corners.index]);this._distancePerCurve=(this._sideLength/params.numCurvesPerSide);this._flex=params.vineflex;if(this._direction==='CW')
{this._corners[0].func=drawfunctions.curveXRFunc;this._corners[1].func=drawfunctions.curveYDFunc;this._corners[2].func=drawfunctions.curveXLFunc;this._corners[3].func=drawfunctions.curveYUFunc;}
else
{this._corners[0].func=drawfunctions.curveYDFunc;this._corners[3].func=drawfunctions.curveXRFunc;this._corners[2].func=drawfunctions.curveYUFunc;this._corners[1].func=drawfunctions.curveXLFunc;}
this._drawFunction=this._corners.current.func;}
climber.prototype._finish=function()
{if(this._currentSide>=this._numOfSides-1)
{this._drawFunction=null;delete this._drawFunction;this._garden.animation.remove(this);}
else
{this._currentSide+=1;this._currentPoint=this._corners.next().clone();this._startingPoint=this._currentPoint.clone();this._drawFunction=this._corners.current.func;this._sideLength=this._corners[this._corners.nextIndex].distanceFrom(this._corners[this._corners.index]);this._distancePerCurve=(this._sideLength/this._numCurvesPerSide);this._counter=0;}
this._seed.growFlower({x:this._currentPoint.x,y:this._currentPoint.y});};climber.prototype._grow=function()
{if(!this._stem||this._counter>this._stemLength)
{this._stem=false;if(this._branchChance&&utils.randomi(0,100)<this._branchChance)
{this._seed.growBranch({currentPoint:this._currentPoint,girth:this._girth,branchLength:this._branchLength,seed:this._seed,garden:this._garden,branchTimeMax:this._branchTimeMax,branchTimeMin:this._branchTimeMin,color:this._color,barkColor:this._barkColor});}}
climberbase.prototype._grow.call(this);}
module.exports=climber;});ImportJS.pack('vine.climberbase',function(module)
{var point=this.import('utils.point');var utils=this.import('utils.utils');var circularQueue=this.import('utils.circularQueue');var garden=this.import('vine.garden');var flower=this.import('vine.flower');function climberbase(params)
{this._direction=params.direction;this._baseTwig=params.baseTwig;this._time=params.time;this._branchChance=params.branchChance;this._branchLength=params.branchLength;this._flower=params.flower;this._girth=params.girth;this._seed=params.seed;this._barkColor=params.barkColor;this._color=params.color;this._drawFunction=null;this._sideLength=null;this._stemLength=params.stemLength;this._timePerSide=5000;this._startTime=null;this._counter=0;this._numCurvesPerSide=params.numCurvesPerSide;this._curveDepth=params.curveDepth;this._toPoint=new point(0,0);this._garden=params.garden;this._value=0;this._verticesL=[];this._verticesR=[];this._rotationPerCurve=180;this._distancePerCurve=null;this._startingPoint=null;Math.degrees=function(rad)
{return rad*(180/Math.PI);};Math.radians=function(deg)
{return deg*(Math.PI/180);};Math.notZero=function(val)
{return(val==0)?0.000001:val;}
this._garden.animation.updates(this,this._grow);this._garden.animation.draws(this,this._draw);};climberbase.prototype._grow=function()
{var run=true;this._counter+=Math.ceil(this._garden.animation.clock.delta*this._sideLength/this._timePerSide);if(this._counter>=this._sideLength)
{this._finish();}
else
{this._toPoint=this._drawFunction(this._startingPoint,this._counter,this._distancePerCurve,this._rotationPerCurve,this._curveDepth,this._direction,this._sideLength);}};climberbase.prototype._draw=function()
{this._garden.context.save();this._garden.context.beginPath();this._garden.context.lineWidth=this._girth+this._bark;this._garden.context.strokeStyle=this._barkColor;this._garden.context.moveTo(this._currentPoint.x,this._currentPoint.y);this._garden.context.lineTo(this._toPoint.x,this._toPoint.y);this._garden.context.stroke();this._garden.context.beginPath();this._garden.context.strokeStyle=this._color;this._garden.context.lineWidth=this._girth;this._garden.context.moveTo(this._currentPoint.x,this._currentPoint.y);this._garden.context.lineTo(this._toPoint.x,this._toPoint.y);this._garden.context.stroke();this._garden.context.restore();this._currentPoint=this._toPoint.clone();};climberbase.prototype._finish=function()
{}
module.exports=climberbase;});ImportJS.pack('vine.drawfunctions',function(module)
{var point=this.import('utils.point');var drawfunctions={};drawfunctions.curveXL=function(startingPoint,counter,distancePerCurve,rotationPerCurve,curveDepth,direction,sideLength)
{var curveRadius=distancePerCurve/2;return new point(curveRadius*Math.cos(Math.radians((sideLength/Math.notZero(counter))*360))+(startingPoint.x),startingPoint.y-counter);};drawfunctions.curveXR=function(startingPoint,counter,distancePerCurve,rotationPerCurve,curveDepth,direction,sideLength)
{var curveRadius=distancePerCurve/2;return new point(startingPoint.x-curveRadius*Math.cos(Math.radians((sideLength/Math.notZero(counter))*360)),startingPoint.y+counter);};drawfunctions.curveYU=function(startingPoint,counter,distancePerCurve,rotationPerCurve,curveDepth,direction,sideLength)
{var curveRadius=distancePerCurve/2;return new point(startingPoint.x+(counter),Math.abs(curveRadius*Math.sin(Math.radians((sideLength/Math.notZero(counter))*360))-startingPoint.y));};drawfunctions.curveYD=function(startingPoint,counter,distancePerCurve,rotationPerCurve,curveDepth,direction,sideLength)
{var curveRadius=distancePerCurve/2;return new point(startingPoint.x+(counter),Math.abs(curveRadius*Math.sin(Math.radians((sideLength/Math.notZero(counter))*360))+startingPoint.y));};drawfunctions.curveYUFunc=function(startingPoint,counter,distancePerCurve,rotationPerCurve,curveDepth,direction,sideLength)
{var tick=Math.floor(Math.notZero(counter)/distancePerCurve)*distancePerCurve+(counter%distancePerCurve);var degreesPertick=rotationPerCurve/distancePerCurve;return new point((direction=='CW')?(startingPoint.x-(Math.sin(Math.radians(degreesPertick*tick))*curveDepth)):(startingPoint.x+(Math.sin(Math.radians(degreesPertick*tick))*curveDepth)),startingPoint.y-tick);};drawfunctions.curveYDFunc=function(startingPoint,counter,distancePerCurve,rotationPerCurve,curveDepth,direction,sideLength)
{var tick=Math.floor(Math.notZero(counter)/distancePerCurve)*distancePerCurve+(counter%distancePerCurve);var degreesPertick=rotationPerCurve/distancePerCurve;return new point((direction=='CW')?(startingPoint.x+(Math.sin(Math.radians(degreesPertick*tick))*curveDepth)):(startingPoint.x-(Math.sin(Math.radians(degreesPertick*tick))*curveDepth)),startingPoint.y+tick);};drawfunctions.curveYFunc=function(startingPoint,counter,distancePerCurve,rotationPerCurve,curveDepth,direction,sideLength)
{var tick=Math.floor(Math.notZero(counter)/distancePerCurve)*distancePerCurve+(counter%distancePerCurve);var degreesPertick=rotationPerCurve/distancePerCurve;return new point((direction=='CW')?(startingPoint.x+(Math.sin(Math.radians(degreesPertick*tick))*curveDepth)):(startingPoint.x-(Math.sin(Math.radians(degreesPertick*tick))*curveDepth)),(direction=='CW')?startingPoint.y+tick:startingPoint.y-tick);};drawfunctions.curveXRFunc=function(startingPoint,counter,distancePerCurve,rotationPerCurve,curveDepth,direction,sideLength)
{var tick=Math.floor(counter/distancePerCurve)*distancePerCurve+(counter%distancePerCurve);var degreesPertick=rotationPerCurve/distancePerCurve;return new point(startingPoint.x+tick,(direction=='CW')?startingPoint.y-(Math.sin(Math.radians(degreesPertick*tick))*curveDepth):startingPoint.y+(Math.sin(Math.radians(degreesPertick*tick))*curveDepth));};drawfunctions.curveXLFunc=function(startingPoint,counter,distancePerCurve,rotationPerCurve,curveDepth,direction,sideLength)
{var tick=Math.floor(counter/distancePerCurve)*distancePerCurve+(counter%distancePerCurve);var degreesPertick=rotationPerCurve/distancePerCurve;return new point(startingPoint.x-tick,(direction=='CW')?startingPoint.y+(Math.sin(Math.radians(degreesPertick*tick))*curveDepth):startingPoint.y-(Math.sin(Math.radians(degreesPertick*tick))*curveDepth));};drawfunctions.curveXFunc=function(startingPoint,counter,distancePerCurve,rotationPerCurve,curveDepth,direction,sideLength)
{var tick=Math.floor(Math.notZero(counter)/distancePerCurve)*distancePerCurve+(counter%distancePerCurve);var degreesPertick=rotationPerCurve/distancePerCurve;return new point(startingPoint.x-tick,(startingPoint.y+(Math.sin(Math.radians(degreesPertick*tick))*curveDepth)));};drawfunctions.curveLeft=function(t)
{return new point(curveXL(t),yy+(yy-curveY(t)));};drawfunctions.curveRight=function(t)
{return new point(-curveXR(t),yy+(yy-curveY(t)));};module.exports=drawfunctions;});ImportJS.pack('vine.flower',function(module,exports)
{var utils=this.import('utils.utils');var garden=this.import('vine.garden');function flower(x,y,garden)
{this._garden=garden;this._vertices=null;this._x=x;this._y=y;this._flower=generateFlower();var TWO_PI=2*Math.PI;this._iterations=0;this._maxiterations=50;this.types={"wave-green":function(that){this._garden.context.fillStyle=that.colorPrimary;var radius=Math.abs(that.x_0);this._garden.context.beginPath();var angleStep=TWO_PI/150;this._garden.context.moveTo(radius*Math.cos(0.0),radius*Math.sin(0.0));for(var angle=0.0;angle<TWO_PI;angle+=angleStep){var rad=radius+
that.params[0]*Math.sin(angle*that.params[1]);this._garden.context.lineTo(rad*Math.cos(angle),rad*Math.sin(angle));};this._garden.context.lineTo(radius*Math.cos(0.0),radius*Math.sin(0.0));this._garden.context.fill();},"wave-red":function(that){this._garden.context.fillStyle=that.colorSecondary;var radius=Math.abs(that.x_0);this._garden.context.beginPath();var angleStep=TWO_PI/140;this._garden.context.moveTo(radius*Math.cos(0.0),radius*Math.sin(0.0));for(var angle=0.0;angle<TWO_PI;angle+=angleStep){var rad=radius+
that.params[0]*Math.sin(angle*that.params[1]);this._garden.context.lineTo(rad*Math.cos(angle),rad*Math.sin(angle));};this._garden.context.lineTo(radius*Math.cos(0.0),radius*Math.sin(0.0));this._garden.context.fill();}};function generateFlower()
{var flower=[];var previousRadius=0.0;while(previousRadius<=1.0){previousRadius+=utils.random(0.1,0.2);if(previousRadius>1.0)break;var colorPrimary='rgb('+
utils.randomi(120,208)+','+
utils.randomi(36,74)+','+
utils.randomi(40,88)+')';var colorSecondary='rgb('+
utils.randomi(41,120)+','+
utils.randomi(105,180)+','+
utils.randomi(41,120)+')';var params=[utils.random(.7,1.05),utils.randomi(4,12),utils.random(8,8),utils.random(0.5,2)];var iter=0;flower.unshift({radius:previousRadius,colorPrimary:colorPrimary,colorSecondary:colorSecondary,type:utils.random(['wave-red','wave-green']),params:params,x_0:utils.random(0.5,0.2),x_1:0.2,iter:iter});}
return flower;}
this._garden.animation.updates(this,this.update);this._garden.animation.draws(this,this.draw);}
flower.prototype.draw=function()
{this._garden.context.save();this._garden.context.translate(this._x,this._y);this._garden.context.scale(5,7);for(var j=0;j<this._flower.length;++j){this.types[this._flower[j].type].bind(this)(this._flower[j]);}
this._garden.context.restore();};flower.prototype.update=function()
{if(this._iterations>=this._maxiterations)
{this._garden.animation.remove(this);}
else
{this._iterations++;}
if(this._iterations%5==0)
{for(var j=0;j<this._flower.length;++j){var dt=0.05;var _l=this._flower[j];var _v=(_l.x_0-_l.x_1)/dt;var _f=0.8;var r=Math.abs(_l.x_0);if(r!==0){_f+=_l.params[2]*(_l.radius-r)*_l.x_0/(r)+_l.params[3]*(-_v);}
var x=2*_l.x_0-_l.x_1+_f*dt*dt;_l.x_1=_l.x_0;_l.x_0=x;}}};module.exports=flower;});ImportJS.pack('vine.garden',function(module)
{var seed;this.inject(function(){seed=this.import('vine.seed');});var animation=this.import('animation.animation');var injectedCanvas=this.import('animation.injectedCanvas')
var engine,runner;var seeds=[];function garden(params)
{this._animation=new animation();this._context=new injectedCanvas(params.container,params.position);this._numOfSeeds=params.numOfSeeds;this._params=params;console.log(this._context);window.addEventListener("resize",function(){$('#vineContainer').width(window.innerWidth);$('#vineContainer').height(window.innerHeight);});if(params.autoStart)
{this.germinate((params.when)?params.when:0);}
this._animation.start(15);}
Object.defineProperty(garden.prototype,"context",{get:function(){return this._context;}});Object.defineProperty(garden.prototype,"animation",{get:function(){return this._animation;}});garden.prototype.germinate=function(when)
{if(typeof(when)=='number'&&when>0)
{setTimeout(this._germinate.bind(this),when);}
else if(when===0)
{this._germinate();}
else
{var e=new Error("parameter must be of type number");e.message=e.message+"at line "+e.lineNumber;console.log(e.message);throw e;}};garden.prototype._germinate=function()
{if(this._numOfSeeds!='undefined')
{this._params.garden=this;for(var i=0;i<this._numOfSeeds;i++)
{seeds.push(new seed(this._params));}}};module.exports=garden;});ImportJS.pack('vine.seed',function(module)
{var climberbase=this.import('vine.climberbase');var climber=this.import('vine.climber');var branch=this.import('vine.branch');var garden=this.import('vine.garden');var flower=this.import('vine.flower');var seed=function(params)
{this._branches=[];this._flowers=[];params.seed=this;this._garden=params.garden;this._vine=new climber(params);delete params;};seed.prototype.growBranch=function(params)
{params.garden=this._garden;params.seed=this;this._branches.push(new branch(params));};seed.prototype.growFlower=function(params)
{this._flowers.push(new flower(params.x,params.y,this._garden));};module.exports=seed;});
ImportJS.pack('utils.circularQueue',function(module)
{var collection=this.import('utils.collection');function circularQueue()
{collection.call(this);collection.injectClassMethods(this._collection,circularQueue.prototype);Object.defineProperty(this._collection,"index",{get:function(){return this._index;},set:function(val){this._index=val;}});Object.defineProperty(this._collection,"reverse",{get:function(){return this._reverse;},set:function(val){this._reverse=val;}});Object.defineProperty(this._collection,"current",{get:function(){return this[this._index];}});Object.defineProperty(this._collection,"nextIndex",{get:function()
{return this._reverse?((this._index-1<0)?this.length-1:this._index-1):(this._index+1==this.length)?0:this._index+1;}});return(this._collection);};circularQueue.prototype=Object.create(collection.prototype);circularQueue.constructor=circularQueue;circularQueue.prototype._index=0;circularQueue.prototype._reverse=false;circularQueue.prototype.next=function()
{this._index=this.nextIndex;return this[this._index];}
circularQueue.prototype.backwards=function()
{this._reverse=true;return this._reverse;}
circularQueue.prototype.forwards=function()
{this._reverse=false;return this._reverse;}
circularQueue.prototype.push=function(val)
{this._index++;Array.prototype.push.call(this,val);};module.exports=circularQueue;});ImportJS.pack('utils.collection',function(module)
{function Collection(){this._collection=Object.create(Array.prototype);this._collection=(Array.apply(this._collection,arguments)||this._collection);Collection.injectClassMethods(this._collection,Collection.prototype);return(this._collection);}
Collection.injectClassMethods=function(collection,objPrototype){for(var method in objPrototype){if(objPrototype.hasOwnProperty(method)){collection[method]=objPrototype[method];}}
return(collection);};Collection.fromArray=function(array){var collection=Collection.apply(null,array);return(collection);};Collection.isArray=function(value){var stringValue=Object.prototype.toString.call(value);return(stringValue.toLowerCase()==="[object array]");};Collection.prototype={add:function(value){if(Collection.isArray(value)){for(var i=0;i<value.length;i++){Array.prototype.push.call(this,value[i]);}}else{Array.prototype.push.call(this,value);}
return(this);},addAll:function(){for(var i=0;i<arguments.length;i++){this.add(arguments[i]);}
return(this);}};Collection.prototype.remove=function(){};Collection.prototype.removeAll=function(newArrayRef)
{for(var i=0;i<this.length;++i)
{if(newArrayRef&&Collection.isArray(newArrayRef))
{newArrayRef.push(Array.prototype.pop.call(this));}
else
{Array.prototype.pop.call(this);}}};Collection.prototype.clear=function()
{for(var i=0;i<this.length;++i)
{delete this[i];}
this.length=0;};module.exports=Collection;});ImportJS.pack('utils.point',function(module,exports)
{var utils=this.import('utils.utils');point.distanceFrom=function(p1,p2)
{return Math.sqrt(Math.pow(p2.y-p1.y,2)+Math.pow(p2.x-p1.x,2));};point.equidistant=function(p1,p2)
{}
function point(x,y)
{this.index=0;this.x=utils.defaultValue(x,0);this.y=utils.defaultValue(y,0);}
point.prototype.distanceFrom=function(p2)
{return Math.sqrt(Math.pow(p2.y-this.y,2)+Math.pow(p2.x-this.x,2));};point.prototype.clone=function()
{return new point(this.x,this.y);};point.prototype.equals=function(point)
{return(point.x==this.x&&point.y==this.y);};point.prototype.val=function(index)
{if(index>1)throw("Error : index must be between 0 and 1 in point.val");return index===0?this.x:this.y;};module.exports=point;});ImportJS.pack('utils.utils',function(module,exports)
{var utils={};utils.defaultValue=function(value,fallback)
{return(typeof value!='undefined')?value:fallback;};utils.randomi=function(a,b)
{return Math.floor(Math.random()*(b-a+1)+a);};utils.isArray=function(object)
{return Object.prototype.toString.call(object)=='[object Array]';};utils.isNumber=function(object)
{return typeof object=='number';};utils.random=function(min,max)
{if(utils.isArray(min))
return min[~~(Math.random()*min.length)];if(!utils.isNumber(max))
max=min||1,min=0;return min+Math.random()*(max-min);};utils.instancetype=function(obj)
{var str=obj.constructor.toString();return str.substring(9,str.indexOf("("));}
utils.addHeadStyleFont=function(jqselector,fontUrl)
{$(jqselector).prepend("<style type=\"text/css\">"+"@font-face {\n"+"\tfont-family: \"myFont\";\n"+"\tsrc: local('☺'), url("+fontUrl+") format('opentype');\n"+"}\n"+"\tp.myClass {\n"+"\tfont-family: myFont !important;\n"+"}\n"+"</style>");};module.exports=utils;});
ImportJS.pack('animation.animation',function(module)
{var clock=this.import('animation.clock');var frameCount=0;var fps,fpsInterval,startTime,now,then,elapsed;function animation()
{this._stop=false;Object.defineProperty(this,"stop",{get:function(){return this._stop;},set:function(val){this._stop=val;}});};Object.defineProperty(animation.prototype,"clock",{get:function(){return this._clock;}});animation.prototype.start=function(fps)
{this._clock=new clock();fpsInterval=1000/fps;then=window.performance.now();startTime=then;console.log(startTime);this.animate();}
animation.prototype.animate=function(newtime)
{this._clock.tick();if(this._stop)
{return;}
this.update();requestAnimationFrame(this.animate.bind(this));now=newtime;elapsed=now-then;if(elapsed>fpsInterval)
{then=now-(elapsed%fpsInterval);this.draw();}};animation.prototype.update_funcs=[];animation.prototype.draw_funcs=[];animation.prototype.draws=function(scope,func){this.draw_funcs.push([scope,func]);};animation.prototype.updates=function(scope,func){this.update_funcs.push([scope,func]);};animation.prototype.update=function()
{for(var i=0;i<this.update_funcs.length;i++)
{this.update_funcs[i][1].call(this.update_funcs[i][0]);}};animation.prototype.draw=function()
{for(var i=0;i<this.draw_funcs.length;i++)
{this.draw_funcs[i][1].call(this.draw_funcs[i][0]);}};animation.prototype.remove=function(caller)
{var flat=[].concat.apply([],this.update_funcs);var col=flat.indexOf(caller)/2;this.update_funcs.splice(col,1);flat=[].concat.apply([],this.draw_funcs);col=flat.indexOf(caller)/2;this.draw_funcs.splice(col,1);if(this.draw_funcs.length<=0)
{this._stop=true;}};module.exports=animation;});ImportJS.pack('animation.clock',function(module)
{function clock()
{this.startTime=Date.now();this.ms=this.startTime;this.last=this.startTime;this.time=0;this.dt=0;this.delta=0;this.fps=0.0;this.frameCount=0;this.frameCounter=true;var timeToUpdate=0;var framesToUpdate=0;this.tick=function(){if(this.frameCounter)this.frameCount++;this.ms=Date.now();this.dt=this.ms-this.last;this.last=this.ms;this.delta=0.001*this.dt;this.time+=this.delta;if(this.frameCounter){timeToUpdate+=this.dt;framesToUpdate++;if(timeToUpdate>1000){this.fps=Math.round((framesToUpdate*1000)/timeToUpdate);framesToUpdate=0;timeToUpdate=0;}}}}
module.exports=clock;});ImportJS.pack('animation.injectedCanvas',function(module)
{function injectedCanvas(container)
{var _container=$('<div id="vineContainer"></div>');if(container!=null)
{_container=container;}
else
{$('body').append(_container);}
var canvasel=$('<canvas id="vineCanvas"></canvas>');_container.append(canvasel);var canvas=canvasel[0];var context=canvas.getContext("2d");canvasel.css({"height":"100%","width":"100%","top":"0","left":"0","z-index":"2","position":"fixed","pointer-events":"none"});canvas.width=canvas.clientWidth;canvas.height=canvas.clientHeight;return context;}
module.exports=injectedCanvas;});